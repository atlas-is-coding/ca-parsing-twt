import os
import asyncio
import logging
import tempfile
import uuid
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, BaseFilter
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from src.utils import convert_to_network_type, convert_to_balance_network_type, convert_to_nft_network_type
from src.parsers.ca import CAParser
from src.parsers.nftca import NftCAParser
from src.parsers.balance import BalanceParser
from src.twitter import TwitterService
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class SettingsStates(StatesGroup):
    min_balance = State()
    max_balance = State()
    min_token_balance = State()
    min_followers = State()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
settings_router = Router()
general_router = Router()


def update_env_file(file_path: str, key: str, new_value: str) -> bool:
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
        
        # –§–ª–∞–≥, –Ω–∞–π–¥–µ–Ω –ª–∏ –∫–ª—é—á
        key_found = False
        # –ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        new_lines = []
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
        for line in lines:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if line.strip() and not line.strip().startswith('#'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω—É–∂–Ω—ã–π –∫–ª—é—á
                if line.strip().startswith(f"{key}="):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    new_lines.append(f"{key}={new_value}\n")
                    key_found = True
                else:
                    new_lines.append(line)
            else:
                new_lines.append(line)
        
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü
        if not key_found:
            new_lines.append(f"{key}={new_value}\n")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as file:
            file.writelines(new_lines)
            
        return True
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: {str(e)}")
        return False


def read_env_file(file_path='.env'):
    config = {
        'MIN_BALANCE_USD': 0.0,
        'MAX_BALANCE_USD': 0.0,
        'MIN_TOKEN_BALANCE_USD': 0.0,
        'MIN_FOLLOWERS': 0
    }
    
    try:
        with open(file_path, 'r') as file:
            for line in file:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                
                # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
                if '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–Ω—ã–º –∫–ª—é—á–∞–º
                    if key == 'MIN_BALANCE_USD':
                        config['MIN_BALANCE_USD'] = float(value)
                    elif key == 'MAX_BALANCE_USD':
                        config['MAX_BALANCE_USD'] = float(value)
                    elif key == 'MIN_TOKEN_BALANCE_USD':
                        config['MIN_TOKEN_BALANCE_USD'] = float(value)
                    elif key == 'MIN_FOLLOWERS':
                        config['MIN_FOLLOWERS'] = int(value)
    
    except FileNotFoundError:
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    return config

# Bot token from environment variable
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ALLOWED_USERS = os.getenv("ALLOWED_USERS", "").split(",")

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (chat_id -> —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á)
active_tasks = {}
active_tasks_lock = asyncio.Lock()
cancel_flags = {}  # –§–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chat_id
cancel_flags_lock = asyncio.Lock()

dp.include_router(settings_router)
dp.include_router(general_router)
# Temporary storage for contract addresses (to work around Telegram's callback data size limit)
contract_storage = {}

# List of supported networks
NETWORKS = ["Solana", "Ethereum", "Binance Chain", "Base", "Arbitrum", "Optimism", "Polygon"]
# List of supported EVM networks for NFT
EVM_NFT_NETWORKS = ["Ethereum", "Binance Chain", "Base", "Arbitrum", "Optimism", "Polygon"]

# Access control filter
class IsAllowedUser(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return str(message.from_user.id) in ALLOWED_USERS

# Command handler for /start
@general_router.message(Command("start"), IsAllowedUser())
async def cmd_start(message: Message):
    await message.answer(
        "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤—Ç—å –≤ –±–æ—Ç–∞!*\n\n –û—Ç–ø—Ä–∞–≤—å *–∫–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å* (`—Ç–æ–∫–µ–Ω–∞, –Ω—Ñ—Ç`) –∏–ª–∏ *—Ñ–∞–π–ª* (–≤ —Ñ–æ—Ä–º–∞—Ç–µ `–∞–¥—Ä–µ—Å:–±–∞–ª–∞–Ω—Å`)",
        parse_mode="Markdown"
    )

@general_router.message(Command("stop"), IsAllowedUser())
async def cmd_stop(message: Message):
    chat_id = message.chat.id
    async with active_tasks_lock:
        if chat_id not in active_tasks or not active_tasks[chat_id]:
            await message.answer("üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", parse_mode="Markdown")
            return

        logger.info(f"–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á –¥–ª—è —á–∞—Ç–∞ {chat_id}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {len(active_tasks[chat_id])}")
        tasks = active_tasks[chat_id]
        for task in tasks:
            logger.info(f"–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ {task.get_name()}")
            task.cancel()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã
        async with cancel_flags_lock:
            cancel_flags[chat_id] = True

        try:
            await asyncio.gather(*tasks, return_exceptions=True)
        except asyncio.CancelledError:
            logger.info(f"–í—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—Ç–º–µ–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á: {str(e)}")

        if chat_id in active_tasks:
            del active_tasks[chat_id]
        else:
            logger.warning(f"chat_id {chat_id} —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ active_tasks")

    await message.answer(
        "üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å).",
        parse_mode="Markdown"
    )

@general_router.message(Command("settings"), IsAllowedUser())
async def cmd_settings(message: Message):
    builder = InlineKeyboardBuilder()

    builder.button(
        text="üí∞ –ú–∏–Ω. –±–∞–ª–∞–Ω—Å ($)",
        callback_data=f"settings:MIN_BALANCE_USD"
    )

    builder.button(
        text="üí∞ –ú–∞–∫—Å. –±–∞–ª–∞–Ω—Å ($)",
        callback_data=f"settings:MAX_BALANCE_USD"
    )

    builder.button(
        text="üí∞ –ú–∏–Ω. –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ ($)",
        callback_data=f"settings:MIN_TOKEN_BALANCE_USD"
    )

    builder.button(
        text="üßü‚Äç‚ôÇÔ∏è –ú–∏–Ω. –∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
        callback_data=f"settings:MIN_FOLLOWERS"
    )

    builder.adjust(1, 1, 1, 1)
    
    config = read_env_file()

    await message.answer(
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n*–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:*\n‚Ä¢ –ú–∏–Ω. –±–∞–ª–∞–Ω—Å: `{config['MIN_BALANCE_USD']}`\n‚Ä¢ –ú–∞–∫—Å. –±–∞–ª–∞–Ω—Å: `{config['MAX_BALANCE_USD']}`\n‚Ä¢ –ú–∏–Ω. –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞: `{config['MIN_TOKEN_BALANCE_USD']}`\n‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: `{config['MIN_FOLLOWERS']}`\n\n",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"

    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@settings_router.callback_query(F.data.startswith("settings:"))
async def handle_settings_callback(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ callback_data
    setting = callback.data.split(":")[1]

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    settings_map = {
        "MIN_BALANCE_USD": {
            "state": SettingsStates.min_balance,
            "prompt": "‚å®Ô∏è *–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –±–∞–ª–∞–Ω—Å ($): *"
        },
        "MAX_BALANCE_USD": {
            "state": SettingsStates.max_balance,
            "prompt": "‚å®Ô∏è *–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å. –±–∞–ª–∞–Ω—Å ($): *"
        },
        "MIN_TOKEN_BALANCE_USD": {
            "state": SettingsStates.min_token_balance,
            "prompt": "‚å®Ô∏è *–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ ($): *"
        },
        "MIN_FOLLOWERS": {
            "state": SettingsStates.min_followers,
            "prompt": "‚å®Ô∏è *–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: *"
        }
    }

    if setting in settings_map:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(settings_map[setting]["state"])
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–Ω–∞—á–µ–Ω–∏–µ
        await callback.message.answer(settings_map[setting]["prompt"], parse_mode="Markdown")
    else:
        await callback.message.answer("*–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞*", parse_mode="Markdown")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    await callback.answer()

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è min_balance
@settings_router.message(SettingsStates.min_balance)
async def process_min_balance(message: Message, state: FSMContext):
    try:
        await state.update_data(min_balance=message.text)
        update_env_file(".env", "MIN_BALANCE_USD", message.text)
        await message.answer(f"‚úÖ –ú–∏–Ω. –±–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{message.text} USD`", parse_mode="Markdown")
    except ValueError:
        await message.answer("üîÅ *–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω. –±–∞–ª–∞–Ω—Å–∞.*", parse_mode="Markdown")
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@settings_router.message(SettingsStates.max_balance)
async def process_max_balance(message: Message, state: FSMContext):
    try:
        await state.update_data(max_balance=message.text)
        update_env_file(".env", "MAX_BALANCE_USD", message.text)
        load_dotenv()
        await message.answer(f"‚úÖ –ú–∞–∫—Å. –±–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{message.text} USD`", parse_mode="Markdown")
    except ValueError:
        await message.answer("üîÅ *–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫—Å. –±–∞–ª–∞–Ω—Å–∞.*", parse_mode="Markdown")
    finally:
        await state.clear()

@settings_router.message(SettingsStates.min_token_balance)
async def process_min_token_balance(message: Message, state: FSMContext):
    try:
        await state.update_data(min_token_balance=message.text)
        update_env_file(".env", "MIN_TOKEN_BALANCE_USD", message.text)
        load_dotenv()
        await message.answer(f"‚úÖ –ú–∏–Ω. –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{message.text} USD`", parse_mode="Markdown")
    except ValueError:
        await message.answer("üîÅ *–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω. –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞.*", parse_mode="Markdown")
    finally:
        await state.clear()

@settings_router.message(SettingsStates.min_followers)
async def process_min_followers(message: Message, state: FSMContext):
    try:
        await state.update_data(min_followers=message.text)
        # MIN_FOLLOWERS
        update_env_file(".env", "MIN_FOLLOWERS", message.text)
        load_dotenv()
        await message.answer(f"‚úÖ –ú–∏–Ω. –∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: `{message.text} USD`", parse_mode="Markdown")
    except ValueError:
        await message.answer("üîÅ *–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω. –∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.*", parse_mode="Markdown")
    finally:
        await state.clear()


# Handler for unauthorized users
@general_router.message(~IsAllowedUser())
async def unauthorized(message: Message):
    await message.answer("üö´ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.", parse_mode="Markdown")

# Handler for contract addresses
@general_router.message(F.text, IsAllowedUser())
async def process_contract_address(message: Message):
    contract_address = message.text.strip()
    
    # Generate a unique ID for this contract address
    contract_id = str(uuid.uuid4())[:8]
    
    # Store the contract address with its ID
    contract_storage[contract_id] = contract_address
    
    # Create inline keyboard with network options
    builder = InlineKeyboardBuilder()
    
    # Add network buttons
    for network in NETWORKS:
        builder.button(
            text=network, 
            callback_data=f"network:{network}:{contract_id}"
        )
    
    # Add NFT buttons
    builder.button(
        text="Solana NFT",
        callback_data=f"nft:sol:{contract_id}"
    )
    
    builder.button(
        text="EVM NFT",
        callback_data=f"nft:evm:{contract_id}"
    )
    
    # Add cancel button
    builder.button(
        text="–û—Ç–º–µ–Ω–∏—Ç—å", 
        callback_data="cancel"
    )
    
    # Adjust layout: networks in pairs (2 per row), NFT buttons in one row, cancel button on its own row
    builder.adjust(2, 2, 2, 1, 2, 1)
    
    await message.answer(
        f"*üõú –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:*\n`{contract_address}`",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è NFT (Solana)
@general_router.callback_query(F.data.startswith("nft:"))
async def process_nft_selection(callback: CallbackQuery):
    _, nft_type, contract_id = callback.data.split(":", 2)
    contract_address = contract_storage.get(contract_id)
    if not contract_address:
        await callback.message.answer(
            "‚ùå *–û—à–∏–±–∫–∞:* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*",
            parse_mode="Markdown"
        )
        return

    chat_id = callback.message.chat.id

    if nft_type == "sol":
        status_message = await callback.message.answer(
            f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ *Solana*\n–ê–¥—Ä–µ—Å: `{contract_address}`\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="Markdown"
        )
        await callback.answer()

        try:
            nft_parser = NftCAParser()
            balance_parser = BalanceParser()

            await status_message.answer(
                f"‚ÑπÔ∏è –ü–æ–ª—É—á–∞—é NFT —Ö–æ–ª–¥–µ—Ä–æ–≤...",
                parse_mode="Markdown"
            )

            holders = await nft_parser.get_holders(contract_address, "sol")
            if not holders:
                await status_message.answer(
                    f"‚ùå NFT —Ö–æ–ª–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*",
                    parse_mode="Markdown"
                )
                return

            holders_count = len(holders)
            await status_message.answer(
                f"‚úÖ –ù–∞—à–ª–æ—Å—å *{holders_count}* NFT —Ö–æ–ª–¥–µ—Ä–æ–≤\n"
                f"‚è≥ –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å—ã —Ö–æ–ª–¥–µ—Ä–æ–≤... (0%)",
                parse_mode="Markdown"
            )

            balances = []
            total_holders = len(holders)
            batch_size = min(500, max(50, total_holders // 10))
            num_batches = (total_holders + batch_size - 1) // batch_size

            async def parse_nft_balances():
                nonlocal balances
                for batch_idx in range(num_batches):
                    start_idx = batch_idx * batch_size
                    end_idx = min(start_idx + batch_size, total_holders)
                    current_batch = holders[start_idx:end_idx]

                    batch_balances = await balance_parser.get_balances(current_batch, "sol")
                    if batch_balances:
                        balances.extend(batch_balances)

                    progress_percent = min(99, int((end_idx) / total_holders * 100))
                    await status_message.answer(
                        f"‚è≥ –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å—ã —Ö–æ–ª–¥–µ—Ä–æ–≤... ({progress_percent}%)",
                        parse_mode="Markdown"
                    )
                return balances

            task = asyncio.create_task(parse_nft_balances())
            if chat_id not in active_tasks:
                active_tasks[chat_id] = []
            active_tasks[chat_id].append(task)

            try:
                await task
            except asyncio.CancelledError:
                logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ NFT –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è Solana –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                if balances:
                    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as temp_file:
                        temp_file_path = temp_file.name
                        for balance in balances:
                            temp_file.write(f"{balance[0]}:{balance[1]}\n")

                    file_to_send = FSInputFile(temp_file_path,
                                               filename=f"partial_nft_holders_solana_{contract_address[:10]}.txt")
                    await callback.message.answer_document(
                        file_to_send,
                        caption=f"üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è `{contract_address}`"
                    )
                    await status_message.answer(
                        f"üõë –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: *{len(balances)} —Ö–æ–ª–¥–µ—Ä–æ–≤*.",
                        parse_mode="Markdown"
                    )
                    os.unlink(temp_file_path)
                else:
                    await status_message.answer(
                        "üõë –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                        parse_mode="Markdown"
                    )
                return

            with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as temp_file:
                temp_file_path = temp_file.name
                for balance in balances:
                    temp_file.write(f"{balance[0]}:{balance[1]}\n")

            await status_message.answer(
                f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–æ–Ω—á–µ–Ω! –ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...",
                parse_mode="Markdown"
            )

            file_to_send = FSInputFile(temp_file_path, filename=f"nft_holders_solana_{contract_address[:10]}.txt")
            await callback.message.answer_document(
                file_to_send,
                caption=f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è `{contract_address}`"
            )

            result_message = (
                f"‚úÖ *–ê–Ω–∞–ª–∏–∑ –∑–∞–∫–æ–Ω—á–µ–Ω*\n\n"
                f"üìä *–î–µ—Ç–∞–ª–∏:*\n"
                f"‚Ä¢ –°–µ—Ç—å: *Solana*\n"
                f"‚Ä¢ –ê–¥—Ä–µ—Å: `{contract_address}`\n\n"
                f"üë• *–ù–∞—à–ª–æ—Å—å {len(balances)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö NFT —Ö–æ–ª–¥–µ—Ä–æ–≤*\n"
                f"üìé –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
            )
            await status_message.answer(
                result_message,
                parse_mode="Markdown"
            )

            os.unlink(temp_file_path)
            if contract_id in contract_storage:
                del contract_storage[contract_id]

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å–∞: {e}")
            await callback.message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: `{str(e)}`\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*",
                parse_mode="Markdown"
            )
            if contract_id in contract_storage:
                del contract_storage[contract_id]
        finally:
            if chat_id in active_tasks and task in active_tasks[chat_id]:
                active_tasks[chat_id].remove(task)
                if not active_tasks[chat_id]:
                    del active_tasks[chat_id]

    elif nft_type == "evm":
        # Show EVM networks for NFT
        builder = InlineKeyboardBuilder()
        
        # Add EVM NFT network buttons
        for network in EVM_NFT_NETWORKS:
            builder.button(
                text=network, 
                callback_data=f"nft_network:{network}:{contract_id}"
            )
        
        # Add back button
        builder.button(
            text="üîô –ù–∞–∑–∞–¥", 
            callback_data=f"back:{contract_id}"
        )
        
        # Add cancel button
        builder.button(
            text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", 
            callback_data="cancel"
        )
        
        builder.adjust(2, 1, 1)
        
        await callback.message.answer(
            f"üõú –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:\n`{contract_address}`",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()

# Callback query handler for NFT network selection
@general_router.callback_query(F.data.startswith("nft_network:"))
async def process_nft_network_selection(callback: CallbackQuery):
    # Extract data from callback
    _, network, contract_id = callback.data.split(":", 2)
    
    network_type = convert_to_nft_network_type(network)
    
    # Retrieve the full contract address from storage
    contract_address = contract_storage.get(contract_id)
    if not contract_address:
        await callback.message.answer(
            "‚ùå *–û—à–∏–±–∫–∞:* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*",
            parse_mode="Markdown"
        )
        return
    
    # Show processing message
    status_message = await callback.message.answer(
        f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ *{network}*\n–ê–¥—Ä–µ—Å: `{contract_address}`\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="Markdown"
    )
    
    await callback.answer()
    
    try:
        # Create parser instances
        nft_parser = NftCAParser()
        balance_parser = BalanceParser()
        
        # Update status message
        await status_message.answer(
            f"‚ÑπÔ∏è –ü–æ–ª—É—á–∞—é NFT —Ö–æ–ª–¥–µ—Ä–æ–≤...",
            parse_mode="Markdown"
        )
        
        # Get holders for the NFT contract address
        holders = await nft_parser.get_holders(contract_address, network_type)
        
        if not holders:
            await status_message.answer(
                f"‚ùå NFT —Ö–æ–ª–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ *{network}*.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*",
                parse_mode="Markdown"
            )
            return
            
        # Show progress after getting holders
        holders_count = len(holders)
        await status_message.answer(
            f"‚úÖ –ù–∞—à–ª–æ—Å—å *{holders_count}* NFT —Ö–æ–ª–¥–µ—Ä–æ–≤\n"
            f"‚è≥ –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å—ã... (0%)",
            parse_mode="Markdown"
        )
        
        # Process balances with progress updates
        balances = []
        total_holders = len(holders)
        
        # Define batch size for processing
        batch_size = min(500, max(50, total_holders // 10))  # At least 10, at most 100, or ~10% of total
        
        # Calculate how many batches we'll process
        num_batches = (total_holders + batch_size - 1) // batch_size  # Ceiling division
        
        # Process holders in batches
        for batch_idx in range(num_batches):
            start_idx = batch_idx * batch_size
            end_idx = min(start_idx + batch_size, total_holders)
            
            # Get the current batch of holders
            current_batch = holders[start_idx:end_idx]
            
            # Get balances for this batch
            balance_network_type = convert_to_balance_network_type(network)
            batch_balances = await balance_parser.get_balances(current_batch, balance_network_type)
            if batch_balances:
                balances.extend(batch_balances)
            
            # Update progress after each batch
            progress_percent = min(99, int((end_idx) / total_holders * 100))
            await status_message.answer(
                f"‚è≥ –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å—ã...... ({progress_percent}%)",
                parse_mode="Markdown"
            )
        
        # Create a temporary file to store the results
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as temp_file:
            temp_file_path = temp_file.name
            
            for balance in balances:
                temp_file.write(f"{balance[0]}:{balance[1]}\n")
        
        # Send the file to the user
        await status_message.answer(
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...",
            parse_mode="Markdown"
        )
        
        # Create input file from the temp file
        file_to_send = FSInputFile(temp_file_path, filename=f"nft_holders_{network}_{contract_address[:10]}.txt")
        
        # Send document
        await callback.message.answer_document(
            file_to_send,
            caption=f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ `{contract_address}`"
        )
        
        # Final status message
        result_message = (
            f"‚úÖ *–ê–Ω–∞–ª–∏–∑ –∑–∞–∫–æ–Ω—á–µ–Ω*\n\n"
            f"üìä *–î–µ—Ç–∞–ª–∏:*\n"
            f"‚Ä¢ –°–µ—Ç—å: *{network}*\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: `{contract_address}`\n\n"
            f"üë• *–ù–∞—à–ª–æ—Å—å {len(balances)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n"
            f"üìé Results file has been sent."
        )
        await status_message.answer(
            result_message,
            parse_mode="Markdown"
        )
        
        # Clean up the temporary file
        os.unlink(temp_file_path)
        
        # Clean up the storage
        if contract_id in contract_storage:
            del contract_storage[contract_id]
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {str(e)}\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*",
            parse_mode="Markdown"
        )
        # Clean up storage even on error
        if contract_id in contract_storage:
            del contract_storage[contract_id]

# Callback query handler for back button
@general_router.callback_query(F.data.startswith("back:"))
async def process_back(callback: CallbackQuery):
    # Extract contract_id from callback
    _, contract_id = callback.data.split(":", 1)
    
    # Retrieve the full contract address from storage
    contract_address = contract_storage.get(contract_id)
    if not contract_address:
        await callback.message.answer(
            "‚ùå *–û—à–∏–±–∫–∞:* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )
        return
    
    # Recreate original keyboard with network options
    builder = InlineKeyboardBuilder()
    
    # Add network buttons
    for network in NETWORKS:
        builder.button(
            text=network, 
            callback_data=f"network:{network}:{contract_id}"
        )
    
    # Add NFT buttons
    builder.button(
        text="Solana NFT",
        callback_data=f"nft:solana:{contract_id}"
    )
    
    builder.button(
        text="EVM NFT",
        callback_data=f"nft:evm:{contract_id}"
    )
    
    # Add cancel button
    builder.button(
        text="–û—Ç–º–µ–Ω–∏—Ç—å", 
        callback_data="cancel"
    )
    
    # Adjust layout: networks in pairs (2 per row), NFT buttons in one row, cancel button on its own row
    builder.adjust(2, 2, 2, 1, 2, 1)
    
    await callback.message.answer(
        f"üõú –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:\n`{contract_address}`",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@general_router.callback_query(F.data.startswith("network:"))
async def process_network_selection(callback: CallbackQuery):
    _, network, contract_id = callback.data.split(":", 2)
    contract_address = contract_storage.get(contract_id)
    if not contract_address:
        await callback.message.answer(
            "‚ùå *–û—à–∏–±–∫–∞:* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*",
            parse_mode="Markdown"
        )
        return

    network_type = convert_to_network_type(network)
    balance_network_type = convert_to_balance_network_type(network)
    chat_id = callback.message.chat.id

    status_message = await callback.message.answer(
        f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ *{network}*\n–ê–¥—Ä–µ—Å: `{contract_address}`\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="Markdown"
    )
    await callback.answer()

    try:
        ca_parser = CAParser()
        balance_parser = BalanceParser()

        await status_message.answer(f"‚ÑπÔ∏è –ü–æ–ª—É—á–∞—é —Ö–æ–ª–¥–µ—Ä–æ–≤...", parse_mode="Markdown")
        holders = await ca_parser.get_holders(contract_address, network_type)

        if not holders:
            await status_message.answer(
                f"‚ùå –•–æ–ª–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ *{network}*.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*",
                parse_mode="Markdown"
            )
            return

        holders_count = len(holders)
        await status_message.answer(
            f"‚úÖ –ù–∞—à–ª–æ—Å—å *{holders_count}* —Ö–æ–ª–¥–µ—Ä–æ–≤\n‚è≥ –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å—ã... (0%)",
            parse_mode="Markdown"
        )

        balances = []
        total_holders = len(holders)
        batch_size = min(100, max(50, total_holders // 10))
        num_batches = (total_holders + batch_size - 1) // batch_size

        batch_tasks = []

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã
        async with cancel_flags_lock:
            cancel_flags[chat_id] = False

        async def parse_balances():
            nonlocal balances
            for batch_idx in range(num_batches):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –±–∞—Ç—á–∞
                async with cancel_flags_lock:
                    if cancel_flags.get(chat_id, False):
                        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /stop –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è {chat_id}, –ø—Ä–µ—Ä—ã–≤–∞—é —Ü–∏–∫–ª –±–∞—Ç—á–µ–π")
                        break

                start_idx = batch_idx * batch_size
                end_idx = min(start_idx + batch_size, total_holders)
                current_batch = holders[start_idx:end_idx]

                if asyncio.current_task().cancelled():
                    logger.info(f"–ó–∞–¥–∞—á–∞ parse_balances –¥–ª—è {network} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–µ—Ä–µ–¥ –±–∞—Ç—á–µ–º {batch_idx + 1}")
                    raise asyncio.CancelledError()

                batch_task = asyncio.create_task(
                    balance_parser.get_balances(current_batch, balance_network_type),
                    name=f"get_balances_batch_{batch_idx}"
                )
                batch_tasks.append(batch_task)

                try:
                    batch_balances = await batch_task
                    if batch_balances:
                        balances.extend(batch_balances)
                except asyncio.CancelledError:
                    logger.info(f"–ó–∞–¥–∞—á–∞ get_balances –¥–ª—è –±–∞—Ç—á–∞ {batch_idx + 1} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    if not batch_task.done():
                        batch_task.cancel()
                    raise

                progress_percent = min(99, int((end_idx) / total_holders * 100))
                await status_message.answer(
                    f"‚è≥ –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å—ã... ({progress_percent}%)",
                    parse_mode="Markdown"
                )
            return balances

        task = asyncio.create_task(parse_balances(), name=f"parse_balances_{network}_{contract_id}")
        async with active_tasks_lock:
            if chat_id not in active_tasks:
                active_tasks[chat_id] = []
            active_tasks[chat_id].append(task)

        try:
            await task
        except asyncio.CancelledError:
            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è {network} –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –±–∞—Ç—á–µ–π
            for batch_task in batch_tasks:
                if not batch_task.done():
                    logger.info(f"–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ {batch_task.get_name()}")
                    batch_task.cancel()
            await asyncio.gather(*[bt for bt in batch_tasks if not bt.done()], return_exceptions=True)

            if balances:
                with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as temp_file:
                    temp_file_path = temp_file.name
                    for balance in balances:
                        temp_file.write(f"{balance[0]}:{balance[1]}\n")

                file_to_send = FSInputFile(temp_file_path,
                                           filename=f"partial_holders_{network}_{contract_address[:10]}.txt")
                await callback.message.answer_document(
                    file_to_send,
                    caption=f"üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è `{contract_address}`"
                )
                await status_message.answer(
                    f"üõë –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: *{len(balances)} —Ö–æ–ª–¥–µ—Ä–æ–≤*.",
                    parse_mode="Markdown"
                )
                os.unlink(temp_file_path)
            else:
                await status_message.answer(
                    "üõë –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                    parse_mode="Markdown"
                )
            return

        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as temp_file:
            temp_file_path = temp_file.name
            for balance in balances:
                temp_file.write(f"{balance[0]}:{balance[1]}\n")

        await status_message.answer(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ì–æ—Ç–æ–≤–ª—é –≤–∞—à —Ñ–∞–π–ª...", parse_mode="Markdown")
        file_to_send = FSInputFile(temp_file_path, filename=f"holders_{network}_{contract_address[:10]}.txt")
        await callback.message.answer_document(
            file_to_send,
            caption=f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è `{contract_address}`"
        )

        result_message = (
            f"‚úÖ *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n"
            f"üìä *–î–µ—Ç–∞–ª–∏:*\n"
            f"‚Ä¢ –°–µ—Ç—å: *{network}*\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: `{contract_address}`\n\n"
            f"üë• *–ù–∞—à–ª–æ—Å—å {len(balances)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤*\n"
            f"üìé –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
        )
        await status_message.answer(result_message, parse_mode="Markdown")

        os.unlink(temp_file_path)
        if contract_id in contract_storage:
            del contract_storage[contract_id]

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: `{str(e)}`\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*",
            parse_mode="Markdown"
        )
        if contract_id in contract_storage:
            del contract_storage[contract_id]
    finally:
        async with active_tasks_lock:
            if chat_id in active_tasks and task in active_tasks[chat_id]:
                active_tasks[chat_id].remove(task)
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã
        async with cancel_flags_lock:
            if chat_id in cancel_flags:
                del cancel_flags[chat_id]

# Callback query handler for cancel button
@general_router.callback_query(F.data == "cancel")
async def process_cancel(callback: CallbackQuery):
    # Delete the message
    await callback.message.delete()
    
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Twitter –∞–Ω–∞–ª–∏–∑–∞
@general_router.message(F.document, IsAllowedUser())
async def process_document(message: Message):
    document = message.document
    if not document.file_name.endswith('.txt'):
        await message.answer(
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ `.txt` —Ñ–∞–π–ª.",
            parse_mode="Markdown"
        )
        return

    file_id = document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path

    with tempfile.NamedTemporaryFile(mode='wb', delete=False, suffix='.txt') as temp_file:
        temp_file_path = temp_file.name

    await bot.download_file(file_path, temp_file_path)

    try:
        with open(temp_file_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        invalid_lines = []
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
            if ':' not in line or len(line.split(':')) != 2:
                invalid_lines.append((i + 1, line))

        if invalid_lines:
            error_message = "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –≤–∏–¥–µ `'wallet:balance'`.\n\n–ü–ª–æ—Ö–∏–µ —Å—Ç—Ä–æ–∫–∏:"
            for idx, (line_num, line_content) in enumerate(invalid_lines[:5]):
                error_message += f"\n–°—Ç—Ä–æ–∫–∞ {line_num}: {line_content}"
            if len(invalid_lines) > 5:
                error_message += f"\n... –∏ –µ—â–µ {len(invalid_lines) - 5} —Å—Ç—Ä–æ–∫"
            await message.answer(error_message, parse_mode="Markdown")
            os.unlink(temp_file_path)
            return

        status_message = await message.answer(
            "‚úÖ –§–æ—Ä–º–∞—Ç –≤–µ—Ä–Ω—ã–π. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –¢–≤–∏—Ç—Ç–µ—Ä–æ–≤...",
            parse_mode="Markdown"
        )

        try:
            twitter_service = TwitterService()
            wallets = [line.strip().split(':')[0] for line in lines if line.strip()]
            chat_id = message.chat.id

            await status_message.answer(
                f"üîç –ù–∞—á–∏–Ω–∞—é Twitter –∞–Ω–∞–ª–∏–∑ –¥–ª—è {len(wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤...\n",
                parse_mode="Markdown"
            )

            semaphore = asyncio.Semaphore(20)
            results = []

            async def process_wallet(wallet):
                async with semaphore:
                    try:
                        result = await twitter_service.analyze_tweets(wallet)
                        return wallet, result if result else None
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ—à–µ–ª—å–∫–∞ {wallet}: {str(e)}")
                        return wallet, None

            tasks = [process_wallet(wallet) for wallet in wallets]
            if chat_id not in active_tasks:
                active_tasks[chat_id] = []
            active_tasks[chat_id].extend(tasks)

            completed = 0
            try:
                for future in asyncio.as_completed(tasks):
                    wallet, result = await future
                    if result:
                        results.append((wallet, result))

                    completed += 1
                    if completed % 50 == 0 or completed == len(wallets):
                        progress = min(99, int(completed / len(wallets) * 100))
                        await status_message.answer(
                            f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}% ({completed}/{len(wallets)})",
                            parse_mode="Markdown"
                        )
            except asyncio.CancelledError:
                logger.info(f"Twitter –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                if results:
                    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as output_file:
                        output_file_path = output_file.name
                        for wallet, result in results:
                            status = result.status
                            if status not in ["GREEN", "YELLOW"]:
                                continue
                            username = result.selected_user if result.selected_user else "N/A"
                            output_file.write(f"{status}:{wallet}:https://x.com/{username}\n")

                    file_to_send = FSInputFile(output_file_path, filename="partial_twitter_analysis_results.txt")
                    await message.answer_document(
                        file_to_send,
                        caption="üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Twitter –∞–Ω–∞–ª–∏–∑–∞"
                    )
                    await status_message.answer(
                        f"üõë –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω. –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: *{len(results)} –∫–æ—à–µ–ª—å–∫–æ–≤*.",
                        parse_mode="Markdown"
                    )
                    os.unlink(output_file_path)
                else:
                    await status_message.answer(
                        "üõë –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω. –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                        parse_mode="Markdown"
                    )
                os.unlink(temp_file_path)
                return

            with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as output_file:
                output_file_path = output_file.name
                for wallet, result in results:
                    status = result.status
                    if status not in ["GREEN", "YELLOW"]:
                        continue
                    username = result.selected_user if result.selected_user else "N/A"
                    output_file.write(f"{status}:{wallet}:https://x.com/{username}\n")

            file_to_send = FSInputFile(output_file_path, filename="twitter_analysis_results.txt")
            await message.answer_document(
                file_to_send,
                caption="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Twitter –∞–Ω–∞–ª–∏–∑–∞"
            )

            await status_message.answer(
                f"‚úÖ *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n"
                f"‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤\n"
                f"‚Ä¢ –ù–∞—à–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {len(results)} –∫–æ—à–µ–ª—å–∫–æ–≤\n"
                f"üìé –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                parse_mode="Markdown"
            )

            os.unlink(temp_file_path)
            os.unlink(output_file_path)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è Twitter –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await status_message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è Twitter –∞–Ω–∞–ª–∏–∑–∞: {str(e)}\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*",
                parse_mode="Markdown"
            )
            if 'temp_file_path' in locals():
                os.unlink(temp_file_path)
        finally:
            if chat_id in active_tasks:
                for task in tasks:
                    if task in active_tasks[chat_id]:
                        active_tasks[chat_id].remove(task)
                if not active_tasks[chat_id]:
                    del active_tasks[chat_id]

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {str(e)}\n\n*–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏*",
            parse_mode="Markdown"
        )
        if os.path.exists(temp_file_path):
            os.unlink(temp_file_path)